# .github/workflows/ci.yml

name: CI (Docker) - unit-tests-base-main # Nome específico para o projeto

on:
  push:
    branches: ["main"]

  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    # Defina aqui o nome da pasta do projeto alvo
    env:
      PROJECT_FOLDER: ci-test

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build dos contêineres
        run: docker compose -f docker-compose.test.yml build
        working-directory: ${{ env.PROJECT_FOLDER }}

      - name: Subir contêineres e executar testes
        run: docker compose -f docker-compose.test.yml up --abort-on-container-exit --exit-code-from node-test
        working-directory: ${{ env.PROJECT_FOLDER }}

      - name: Rodar Linter
        run: docker compose -f docker-compose.test.yml run --rm node-test npm run lint
        working-directory: ${{ env.PROJECT_FOLDER }}

      - name: Compilar o código TypeScript (Build)
        run: docker compose -f docker-compose.test.yml run --rm node-test npm run build
        working-directory: ${{ env.PROJECT_FOLDER }}

      - name: Upload do relatório de cobertura
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-unit-tests
          path: ${{ env.PROJECT_FOLDER }}/coverage

      - name: Derrubar contêineres
        if: always()
        run: docker compose -f docker-compose.test.yml down
        working-directory: ${{ env.PROJECT_FOLDER }}
